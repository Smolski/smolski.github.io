# Primeiros Passos com o R{#intro}
## Download e instalação do R e Rstudio


# R: <http://www.r-project.org>. 

# RStudio: <http://www.rstudio.com/products/rstudio/download>.


## Painéis


## Help


help(mean)
?mean


## Instalação de pacotes

install.packages("readr")

install.packages(c("readr", "readxl"))

## Abrir arquivo de dados

library(readxl)
nome.objeto.xls = read_excel("d:/arvores.xls")

library(readr)
nomeobjeto = read.csv("d:/arvores.csv")

library(haven)
nomeobjeto = read_sav("d:/arvores.sav")

nomeobjeto = read_dta("d:/arvores.dta")

nomeobjeto = read_sas("d:/arvores.sas7bdat")

read.csv("d:/arvores.csv", sep=",")

load("base.RData")


- **Numeric**: números, valores decimais em geral (`5.4`).
- **Integer**: números (`4`).
- **Character**: variável de texto, ou *string* (`casa`).
- **Double**: cria um vetor de precisão dupla, que abarca os números.
- **Logical**: operadores booleanos (`TRUE, FALSE`).
- **Date**: opção para datas.
- **Time**: vetor para séries de tempo.
- **Factor**: variável nominal, inclusive como fator ordenado, representam categorias.

source("http://www.openintro.org/stat/data/cdc.R")

## Salvar arquivo de dados

save("nomeDoObjeto",file="nomeDoArquivo.RData")

load("arquivo.RData")`

write.csv(nomeobjeto,"file.csv", sep=";") # salvando em arquivo csv.
write.foreign(nomeobjeto,"d:/nome.sps") # arquivos sps.
write.foreign(nomeobjeto,"d:/nome.dta") # arquivos dta.
write.foreign(nomeobjeto,"d:/nome.sas7bdat") # arquivos sas7bdat.

## Diretórios de trabalho

getwd()
setwd("C://file/path")
dir()

## Bases de dados nativas do R e de pacotes

head(iris)

data()

data(package = .packages(all.available = TRUE))

data(africa, package="Amelia")
head(africa)

## Operações

### Operações Aritméticas

# soma
19+26
# subtração
19-26
# divisão
4/2
# multiplicação 
4*2
# exponenciação
4^2
# prioridade de resolução
19 + 26 /4 -2 *10
((19 + 26) /(4 -2))*10
# raiz quadrada
sqrt(16)
# Logaritmo 
log(1)

### Operações Lógicas

a == b # ("a" é igual a "b")
a != b # ("a" é diferente a "b")
a > b  # ("a" é maior que "b")
a < b  # ("a" é menor  que "b")
a >= b # ("a" é maior ou igual a "b")
a <= b # ("a" é menor ou igual a "b")
is.na  # ("a" é missing - faltante)
is.null # ("a" é nulo)

# maior que 
2 > 1
1 > 2

# menor que 
1 < 2

# maior ou igual a 
0 >= (2+(-2))

# menor ou igual a 
1 <= 3

# conjunção
9 > 11 & 0 < 1

# ou
6 < 5 | 0 > -1

# igual a
1 == 2/2

# diferente de
1 != 2
```

## Criação de objetos


#Criando um objeto simples
objeto = "meu primeiro objeto" #enter
#Agora para retomar o objeto criado:
objeto #enter

#Pode ser efetuada uma operação:
a= 2+1
a

#Lista objetos do ambiente
ls()
#Remover um banco de dados
rm(a)


## onversão de uma variável**
  

idade=c('11', '12', '31')
nomes=c("Elisa", "Priscila", "Carol")
cep=c(98700000,98701000,98702000)
idade= as.numeric(idade)
idade
cep = as.character(cep)
cep


## Algumas funções e comandos essenciais

#Carregando dados da base do RSdudio iris.
data(iris)

#Visualizando as primeiras 6 colunas
head(iris)

#Resumo do objeto
summary(iris)

#Para visualizar os nomes das colunas dos dados:
names(iris)

#vizualizar as ultimas seis linhas do objetos
tail(iris)

class(iris)
class(iris$Sepal.Length)
class(iris$Species)


ls.str(iris)

### Funções *View* e *dim*

View(iris)
dim(iris)

#Alterar o nome da coluna, sendo que o '[5]' indica que está na quinta coluna.
colnames(iris)[5]='Especie'

#Definindo a função attach para o objeto 'dados'.
attach(iris)
#Efetuando o sumário de 'pop.total'.
summary(Petal.Width)
#Como a coluna 'distrito' é um fator, o sumário será 
#a contagem da quantidade de cada fator na coluna.
summary(Especie)


### Função *tapply*

#Função 'tapply', número médio da população total por distrito.
tapply(Sepal.Length, Especie, mean)

#Função 'tapply' considerando NAs:
tapply(Sepal.Length, Especie, mean)
#Função 'tapply' sem considerar NAs:
tapply(Sepal.Length, Especie, mean, na.rm=T)


### Função *subset*

dadossetosa=subset(iris, Especie=='setosa')
head(dadossetosa)

dadossetosa2=subset(iris, Especie=='setosa'& Sepal.Length>5)
head(dadossetosa2)

### Função *table*

# Carregando a base
source("http://www.openintro.org/stat/data/cdc.R")
#Vizualiza-se as primeiras linhas
head(cdc)
# Efetua-se a contagem dos dados qualitativos com a função table
table(cdc$genhlth,cdc$gender)
# Adiciona-se a soma dos valores das linhas e colunas
addmargins(table(cdc$genhlth,cdc$gender))

## Estrutura de dados

### Vetores

# Criação de um vetor
c(2, 4, 6)

c(2:6)

# Criação de um vetor a partir do intervalo entre cada elemento e valores
#mínimo e máximo
seq(2, 3, by=0.5)

rep(1:3, times=4)

rep(1:3, each=3)

sexo<-factor(rep(c("F", "M"),each=8))
sexo

numeros=rep(1:3,each=3)
numeros

numeros.f<-factor(numeros)
numeros.f

tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4))
tratamentos

tratamentos=factor(rep(c("controle","adubo A","adubo B"), each=4), 
                   levels=c("controle", "adubo A", "adubo B"))
tratamentos


participantes=factor(rep("mulheres",10), levels=c("mulheres","homens"))
participantes

### Matrizes
  
nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4)
nome.da.matriz

nome.da.matriz= matrix(data=1:12,nrow = 3,ncol = 4, byrow=T)
nome.da.matriz

lista = list(matriz=matrix(c(1,2,1), nrow=3, ncol=2))
lista

### Listas

# **nrow**: corresponde ao número de linhas;
# **ncol**: corresponde ao número de colunas.

lista = list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),vetor=1:6)
lista


# **Comandos para manipulação de listas**
  
lista
length(lista)

names(lista)

lista.1 = list(matriz=matrix(c(1,2,1,5,7,9), nrow=3, ncol=2),
               vetor=1:6)
lista.2 = list(nomes=c("Marcelo", "Fábio", "Felipe"), 
               idade=c(25, 34, 26))
c(lista.1,lista.2)


### Data frames

estudantes= c("Camila", "Pedro", "Marcelo","Guilherme")
idade=c(21,17,17,18)
peso=c(65,79,80,100)
informacoes=data.frame(estudantes,idade,peso)
informacoes


informacoes$cidades=c("Nova Hartz","Gramado","Soledade",
                      "Porto Alegre")
informacoes

length(subset(informacoes$cidades, informacoes$cidades=="Soledade"))


## Pré tratamento de banco de dados

library(dplyr)
starwars=data.frame(starwars[1:5])
str(starwars)
summary(starwars)

names(starwars)=abbreviate(names(starwars), minlength = 3)
names(starwars)


names(starwars)[1]="Nome"
names(starwars)=c("Nome", "Altura", "Peso", "Corcabelo", "Corpele")
names(starwars) 

starwars$Corcabelo=as.factor(starwars$Corcabelo)
starwars$Corpele=as.factor(starwars$Corpele)
summary(starwars$Corpele)


head(is.na(starwars))

table(is.na(starwars))

# Substituindo NAs por média
starwars$Altura[is.na(starwars$Altura)]=mean(starwars$Altura, na.rm=TRUE)
summary(starwars$Altura)

# Substituindo NAs por zero
starwars$Peso[is.na(starwars$Peso)]=0
summary(starwars$Peso)

starwars$Peso[starwars$Peso==0]=NA
summary(starwars$Peso)

starwars=na.omit(starwars)
summary(starwars)

## Manipulação de banco de dados

informacoes.2=edit(informacoes)

informacoes.2 


# Crição do data frame
estudantes=c("Guilherme", "Marcelo", "Pedro", "Camila")
altura= c(1.50, 1.9, 1.74, 1.80)
informacoes.3=data.frame(estudantes, altura)
head(informacoes.3)

# União de um banco de dados (existencia de uma váriavel em comum)

informacoes=merge(informacoes.2,informacoes.3, by="estudantes")
head(informacoes)

informacoes$Imc=c(informacoes$peso/(informacoes$altura^2))
informacoes

# Substituir números na coluna
informacoes$idade[informacoes$idade == 17] <- 19
informacoes


# Classificar qualitativamente informações em um determinado intervalo 
classificacao=ifelse(informacoes$Imc<25, "peso normal","excesso de peso")
informacoes=cbind(informacoes, classificacao)
informacoes



informacoes$tipoimc=ifelse(informacoes$Imc<17, "Muito abaixo do peso",
                           ifelse(informacoes$Imc>=17&informacoes$Imc<=18.49,"Abaixo do peso",
                                  ifelse(informacoes$Imc>=18.5&informacoes$Imc<=24.99,"Peso Normal",
                                         ifelse(informacoes$Imc>=25&informacoes$Imc<=29.99,"Acima do Peso",
                                                ifelse(informacoes$Imc>=30&informacoes$Imc<=34.99,"Obesidade I",
                                                       ifelse(informacoes$Imc>=35&informacoes$Imc<=39.99,"Obesidade II",
                                                              "Obesidade III"))))))
informacoes



# Classificar informações usando o código binário
informacoes$binario= ifelse(informacoes$classificacao 
                            == 'peso normal', 1, 0) 
informacoes

novo1=data.frame(estudantes="Francisco", idade=30, peso=59, 
                 cidades="Ijuí", 
                 altura="1.59", 
                 Imc= 23.33768, 
                 classificacao= "peso normal",
                 tipoimc="Peso Normal", 
                 binario=1)
informacoes=rbind(informacoes, novo1)
informacoes


library(dplyr)
informacoes= mutate(informacoes, 
                    "faixa etaria"= ifelse(informacoes$idade<21,
                                           "não adulto", "adulto"))
informacoes


# Reordenar colunas
informacoes=informacoes[c(8,2,3,4,1,6,5,7,9,10)]


# Inversão do posicionamento dos elementos
rev(informacoes)

# contagem de objetos
table(informacoes$classificacao)

# Ordenar os objetos em ordem crescente
sort(informacoes$idade)

# Ordem decrescente 
informacoes[order(informacoes$idade, decreasing = TRUE),]

#ordem crescente
informacoes[order(informacoes$idade, decreasing = FALSE),]

#ordem crescente
informacoes[order(informacoes$cidades, decreasing = FALSE),]

informacoes$rankingImc=rank(informacoes$Imc)
informacoes



rank(-informacoes$Imc)

### O pacote *tidyr*
  


#### Função *spread*

library(tidyr)
table2

spread(table2, type, count)


#### Função *gather*

table4a

gather(table4a, "year", "cases", 2:3)


#### Função *separate*

table3

separate(table3, rate, into = c("cases", "population"),sep = "/")

separate(table3, year, into = c("century", "year"), sep = 2)

#### Função *unite*

table5

unite(table5, "new", century, year, sep = "")

### O pacote *dplyr*

head(mtcars)

#### Função *select*

library(dplyr)

novo=select(mtcars, mpg, cyl)
head(novo)

novo=select(mtcars, -c(mpg))
head(novo)

novo=select(mtcars, cyl:drat)
head(novo)

#### Função *filter*

novo=filter(mtcars, hp>146)
head(novo)

novo=filter(mtcars, hp>146 & am==1)
head(novo)


library(stringr)
table5 %>%
  filter(str_detect(country, "Bra"))


#### Função *mutate*

novo=mutate(mtcars, novacol=(mpg*100))
head(novo)

#### Função *summarise*

summarise(mtcars, 
          media.hp=mean(hp), 
          qtd.hp=length(hp),
          qtdunico.hp=length(unique(hp)))


summarise(group_by(mtcars, cyl.agrup=cyl), 
          hp.medio=mean(hp), 
          wt.medio=mean(wt),
          qtd=n())

#### Função *count*


count(mtcars, cyl)


#### Função *arrange*

novo=arrange(mtcars, cyl)
head(novo)


novo=arrange(mtcars, mpg, desc(disp))
head(novo)


#### Operador *pipe*

novo = mtcars %>%
  filter(am == 1) %>%
  group_by(cyl) %>%
  summarise(disp.drat=mean(drat), 
            hp.media=mean(hp))

novo


mtcars %>%
  select(starts_with("d")) %>%
  head


mtcars %>%
  select(contains("a")) %>%
  head


mtcars %>%
  aggregate(. ~ cyl, ., mean)



## Funções Matemáticas


log(1.5)

exp(1)


max(informacoes$idade)

min(informacoes$idade)


# Para descobrir em qual posição se encontra o peso mínimo:
which.min(informacoes$peso)
which.max(informacoes$peso)


informacoes$estudantes[which.min(informacoes$peso)]
informacoes$estudantes[which.max(informacoes$Imc)]

# Arredondar para n casas decimais
round(informacoes$Imc, 2)


x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3) 

# Realiza a somatória dos valores
sum(informacoes$idade)

# Desvio padrão
sd(informacoes$idade)

# Variancia
var(informacoes$idade)

# Calcula a média aritmética dos valores
mean(informacoes$idade)

# Informa o valor mediano do conjunto
median(informacoes$idade)


# obter os quartis dos dados de acordo com as probabilidades estabelecidas pelo pesquisador.
quantile(informacoes$idade,  probs = c(0.5, 1, 2, 5, 10, 50)/100)

## Conversão e manipulação de datas

abertura <- c("03/02/69") # Exemplo de criação de data inicial
fechamento <- c("2000-20-01") # Criação de data final
abertura <- as.Date(abertura, format = "%d/%m/%y") # Formatação da data
fechamento <- as.Date(fechamento, format = "%Y-%d-%m") 
class(abertura) # Verificando a classe do objeto
class(fechamento)


# Diferença de dias dos intervalos informados
dif=abertura-fechamento # Efetua o cálculo da diferença entre as datas
dif
class(dif) # Verifica a classe do objeto
as.numeric(dif) # Retoma o valor numérico da diferença
units(dif) # Retoma a unidade da diferença entre as datas

### O pacote *lubridate*


library(lubridate)

ymd(20190215)

mdy("2/15/19")


# Criando uma base de dados
data=data.frame(data=c("01/01/2018","02/02/2019",
                       "02/02/2019","05/02/2019","06/02/2019"),
                quant=c(100,200,100,150,300),
                valor=c(550.00,600.00,100.00,150.00,250.00))
head(data)



# Configurando a variável data
data$data=dmy(data$data)


# Criando uma nova variável do ano da venda
data$ano=year(data$data)
data

# Criando uma nova variável do mês da venda
data$mes=month(data$data)
data

# Criando nova variável do dia da venda
data$dia=day(data$data)
data

# Criando nova variável do dia da semana da venda
data$diasem=wday(data$data, label=TRUE)
data


# Valor das vendas por mês
aggregate(data$valor, list(Var = data$mes), sum)

# Quantidade de vendas por mês
aggregate(data$quant, list(Var = data$mes), sum)

# Valor das vendas por mês e dia da semana 
aggregate(valor ~ mes + diasem, data = data, sum)

# Utilizando o pacote dplyr
library(dplyr)

data %>%
  group_by(diasem) %>%
  summarise(total = sum(valor))


